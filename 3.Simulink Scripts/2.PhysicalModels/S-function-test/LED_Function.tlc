%% File : LED_Function.tlc
%% Created : Mon Jan 03 19:02:15 2022
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "LED_Function.cpp".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  LED_Function "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output

  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    %assign hFileName = "LED_Function_accel_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif
    SFB_EXTERN_C void LED_Function_Outputs_wrapper_accel(const real_T *xD);
    SFB_EXTERN_C void LED_Function_Update_wrapper_accel(real_T *xD);
    #undef SFB_EXTERN_C
    #endif
    %closefile hFile

    %assign cFileName = "LED_Function_accel_wrapper"
    %openfile cFile = "%<cFileName>.cpp"
    %selectfile cFile
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #include "%<hFileName>.h"
    

    extern void LED_Function_Start_wrapper(real_T *xD);
    extern void LED_Function_Outputs_wrapper(const real_T *xD);
    extern void LED_Function_Terminate_wrapper(real_T *xD);

    extern void LED_Function_Update_wrapper(real_T *xD);
    void LED_Function_Outputs_wrapper_accel(const real_T *xD){
    LED_Function_Outputs_wrapper(xD);
    }

    void LED_Function_Update_wrapper_accel(real_T *xD){
    LED_Function_Update_wrapper(xD);
    }

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>

  %else
    %assign hFileName = "LED_Function_cgen_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif
    SFB_EXTERN_C void LED_Function_Outputs_wrapper_cgen(const real_T *xD);
    SFB_EXTERN_C void LED_Function_Update_wrapper_cgen(real_T *xD);
    #undef SFB_EXTERN_C
    #endif
    %closefile hFile

    %assign cFileName = "LED_Function_cgen_wrapper"
    %openfile cFile = "%<cFileName>.cpp"
    %selectfile cFile
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #include "%<hFileName>.h"

	extern void LED_Function_Outputs_wrapper(const real_T *xD);
	extern void LED_Function_Update_wrapper(real_T *xD);
	 void LED_Function_Outputs_wrapper_cgen(const real_T *xD) {
	LED_Function_Outputs_wrapper(xD);
	}
	 void LED_Function_Update_wrapper_cgen(real_T *xD) {
	LED_Function_Update_wrapper(xD);
	}
    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>

  %openfile externs

    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif

    SFB_EXTERN_C void LED_Function_Start_wrapper(real_T *xD);

    SFB_EXTERN_C void LED_Function_Outputs_wrapper(const real_T *xD);
    SFB_EXTERN_C void LED_Function_Update_wrapper(real_T *xD);

    SFB_EXTERN_C void LED_Function_Terminate_wrapper(real_T *xD);

    #undef SFB_EXTERN_C
  %closefile externs
  %<LibCacheExtern(externs)>

  %endif
  %%
%endfunction

%% InitializeConditions =========================================================
%%
%function InitializeConditions(block, system) Output
  /* %<Type> Block: %<Name> */
{
  real_T initVector[1] = {0};
  %assign rollVars = ["<dwork>/DSTATE"]
  %assign rollRegions = [0:%<LibBlockDWorkWidth(DSTATE)-1>]
  %roll sigIdx = rollRegions, lcv = 1, block, "Roller", rollVars
    %if %<LibBlockDWorkWidth(DSTATE)> == 1
      %<LibBlockDWork(DSTATE, "", lcv, sigIdx)> = initVector[0];
    %else
      %<LibBlockDWork(DSTATE, "", lcv, sigIdx)> = initVector[%<lcv>];
    %endif
  %endroll
}


%endfunction

%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    LED_Function_Outputs_wrapper_accel(%<pxd>);
  %else
    LED_Function_Outputs_wrapper_cgen(%<pxd>);
  %endif

  %%
%endfunction

%% Function: Update ==========================================================
%% Abstract:
%%    Update
%%
%%
%function Update(block, system) Output
    /* S-Function "LED_Function_wrapper" Block: %<Name> */
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
    %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    LED_Function_Update_wrapper_accel(%<pxd>);
  %else
    LED_Function_Update_wrapper_cgen(%<pxd>);
  %endif

  %%
%endfunction

%% [EOF] LED_Function.tlc

